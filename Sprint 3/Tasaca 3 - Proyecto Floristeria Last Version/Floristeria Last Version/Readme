ALCANCE DEL PROYECTO:

1. NO SE PERMITE EL DUPLICADO DE NOMBRE EN CADA TIPO DE PRODUCTOS, AUNQUE CAMBIEN SUS OTROS ATRIBUTOS.
    ESTO ES ASÍ PORQUE A LA HORA DE REMOVER PRODUCTOS SE REALIZA MEDIANTE EL NOMBRE DEL PRODUCTO.
    PARA HACER MÁS COMPLEJO EL PROGRAMA, SE DEBERÍA PERMITIR EL DUPLICADO Y AÑADIR UN ATRIBUTO MÁS DE
    CANTIDAD DE PRODUCTO. COMO EL EJERCICIO NO ESPECIFICA LA COMPLEJIDAD DE LA APP, HEMOS DECIDIDO
    NO AÑADIR ESTA FUNCIONALIDAD PARA SIMPLIFICAR EL TRABAJO Y DIRIGIRNOS MÁS CENTRADOS AL OBJETIVO DEL
    MISMO.

MODELO DE COLUMNAS TABLAS "TXT" PRODUCTOS

id - productType - name - price - description

                        ----------------------------------------------------------------
TO DO:

3- do while por si se confunde en el nombre de la floreria al iniciar el programa.
4- Si pongo esto:
    (0). Close app and save changes
    Enter an option: 0
    Enter the shop's name: k
    MAIN MENU:
    (1). Add a product
    (2). Remove a product
    (3). Enter to store's info menu
    (4). Enter to sale's menu
    (0). Close app and save changes
    Enter an option: 1

    "Me está aceptando el nombre de una floreria que no existe."

CAMBIOS QUE HICE

1- Cambio nombre metodos "getSaleList" y "getProductList" en clase "TxtBBDD"
2- Constructor clase "SalesManager"
3- Clase "FlowerShop": private boolean shopExists lo inicializo en el constructor.
4- RunApp(): Do-While. EL TEMA ES QUE, POR EL SINGLETON, AHORA NO FUNCIONA SI LA PRIMERA FLORERIA QUE SE INGRESA NO
    EXISTE EN LA BASE DE DATOS.
5- Constructor clase STOCK. IMPORTANTE.
6- metodo "printShopValue": toUpperCase

DUDAS

1- La clase Stock se instancia con un metodo de su propia clase y no a traves de su constructor.
2- ¿Cuál es el formato de la BBDD para SALES?
3- Metodo getSaleListFromTxt, en la clase TxtBBDD: ¿Cómo trabaja?
4- ¿Cómo trabaja el metodo TOString de la clase SALE?
5- Que haces esto (clase STOCK)? : new ArrayList<>(service.getProductList(flowerShopName)).forEach(this::addProduct);
6- Clase SALE: generate ticket y toString?